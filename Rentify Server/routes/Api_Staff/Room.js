const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');
const Building = require('../../models/Building');
const Room = require('../../models/Room');
const upload = require('../../config/common/uploadImageRoom')

const Invoice = require('../../models/Invoice')
// api l·∫•y danh s√°ch t√≤a üòä
router.get('/buildings-by-manager/:manager_id', async (req, res) => {
    const { manager_id } = req.params;
    if (!mongoose.Types.ObjectId.isValid(manager_id)) {
        return res.status(400).json({ error: 'Invalid manager ID.' });
    }
    try {
        const buildings = await Building.find({ manager_id })
            .populate('landlord_id', 'username phoneNumber')
            .populate('manager_id', 'username phoneNumber')
            .populate('service', 'name');
        if (!buildings || buildings.length === 0) {
            return res.status(404).json({ message: 'No buildings found for this manager.' });
        }
        const buildingsWithRooms = [];
        for (let building of buildings) {
            const rooms = await Room.find({ building_id: building._id }).select('room_name room_type price status');
            building = building.toObject();
            building.rooms = rooms;
            buildingsWithRooms.push(building);
        }
        res.status(200).json(buildingsWithRooms);
    } catch (error) {
        console.error('Error fetching buildings and rooms:', error.message);
        res.status(500).json({ error: 'Failed to fetch buildings and rooms. Please try again later.' });
    }
});
// api l·∫•y danh s√°ch ph√≤ng theo t√≤a ü§¶‚Äç‚ôÇÔ∏è
router.get('/RoomsForBuilding/:building_id', async (req, res) => {
    try {
        // L·∫•y building_id t·ª´ tham s·ªë URL
        const { building_id } = req.params;

        // T√¨m t·∫•t c·∫£ ph√≤ng trong t√≤a nh√† ƒë√≥
        const rooms = await Room.find({ building_id }).select('room_name room_type price status');

        // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ ph√≤ng n√†o
        if (!rooms || rooms.length === 0) {
            // N·∫øu kh√¥ng c√≥ ph√≤ng, tr·∫£ v·ªÅ danh s√°ch r·ªóng
            return res.json([]);
        }

        // Tr·∫£ v·ªÅ k·∫øt qu·∫£ l√† danh s√°ch c√°c ph√≤ng v·ªõi c√°c tr∆∞·ªùng ƒë∆∞·ª£c ch·ªçn
        return res.status(200).json(rooms);
    } catch (error) {
        // N·∫øu c√≥ l·ªói x·∫£y ra
        return res.status(500).json({ message: 'Server error', error: error.message });
    }
});
// Hi·ªÉn th·ªã chi ti·∫øt ph√≤ng ü§∑‚Äç‚ôÇÔ∏è
const normalizePaths = (room) => {
    const removeUnnecessaryPath = (path) => path.replace(/^\/landlord\//, '');

    room.photos_room = room.photos_room.map(photo => removeUnnecessaryPath(photo.replace(/\\/g, '/')));
    room.video_room = room.video_room.map(video => removeUnnecessaryPath(video.replace(/\\/g, '/')));
    return room;
};
router.get('/RoomDetail/:id', async (req, res) => {
    const { id } = req.params;
    if (!mongoose.Types.ObjectId.isValid(id)) {
return res.status(400).json({ error: 'Invalid room ID.' });
    }
    try {
        const room = await Room.findById(id).lean().populate("service", "name");
        if (!room) {
            return res.status(404).json({ error: 'Room not found.' });
        }
        const normalizedRoom = normalizePaths(room);
        res.status(200).json(normalizedRoom);
    } catch (error) {
        console.error('Error fetching room details:', error.message);
        res.status(500).json({ error: 'Failed to fetch room details. Please try again later.' });
    }
});
// _vanphuc :th√™m ph√≤ng  theo t√≤a nh√†  üò∂‚Äçüå´Ô∏è
router.post(
    "/addRoom",
    upload.fields([
      { name: "photos_room", maxCount: 10 }, // T·ªëi ƒëa 10 ·∫£nh
      { name: "video_room", maxCount: 2 }, // T·ªëi ƒëa 2 video
    ]),
    async (req, res) => {
      try {
        const {
          building_id,
          room_name,
          room_type,
          description,
          price,
          size,
          service,
          amenities,
          limit_person,
          status,
        } = req.body;

        // Ki·ªÉm tra d·ªØ li·ªáu b·∫Øt bu·ªôc
        if (
          !building_id ||
          !room_name ||
          !room_type ||
          !description ||
          !price ||
          !size ||
          status === undefined
        ) {
          return res.status(400).json({ message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc" });
        }

        // L∆∞u ƒë∆∞·ªùng d·∫´n ·∫£nh v√† video
        const photos_room = req.files.photos_room
          ? req.files.photos_room.map((file) => file.path) // L∆∞u chu·ªói URL thay v√¨ ƒë·ªëi t∆∞·ª£ng
          : [];
        const video_room = req.files.video_room
          ? req.files.video_room.map((file) => file.path)
          : [];

          const parsedAmenities = Array.isArray(amenities)
          ? amenities
          : typeof amenities === "string"
          ? JSON.parse(amenities)
          : [];
          const parsedService = Array.isArray(service)
          ? service
          : typeof service === "string"
          ? JSON.parse(service)
          : [];

        // T·∫°o m·ªõi m·ªôt ph√≤ng
        const newRoom = new Room({
          building_id,
          room_name,
          room_type,
          description,
          price,
          size,
          video_room,
          photos_room,
          service:parsedService,
          amenities:parsedAmenities,
          limit_person,
          status,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
        });

        // L∆∞u ph√≤ng v√†o c∆° s·ªü d·ªØ li·ªáu
        const savedRoom = await newRoom.save();
        res
          .status(201)
          .json({ message: "Th√™m ph√≤ng th√†nh c√¥ng", room: savedRoom });
      } catch (error) {
        console.error(error);
        res
          .status(500)
          .json({ message: "L·ªói khi th√™m ph√≤ng", error: error.message });
      }
    }
  );
// api x√≥a ph√≤ng üëΩ
router.delete('/DeleteRooms/:id', async (req, res) => {
    const { id } = req.params;
    if (!mongoose.Types.ObjectId.isValid(id)) {
        return res.status(400).json({ message: "Invalid room ID." });
    }
    try {
        const room = await Room.findById(id);
        if (!room) {
            return res.status(404).json({ message: "Room not found" });
        }
        await Room.findByIdAndDelete(id);
        res.status(200).json({ message: "Room deleted successfully." });
    } catch (error) {
        console.error('Error deleting room:', error.message);
        res.status(500).json({ message: "Failed to delete room", error: error.message });
    }
});
// API c·∫≠p nh·∫≠t ph√≤ng üòò
router.put(
    "/updateRoom/:id",
    upload.fields([
      { name: "photos_room", maxCount: 10 }, // T·ªëi ƒëa 10 ·∫£nh
      { name: "video_room", maxCount: 2 }, // T·ªëi ƒëa 2 video
    ]),
    async (req, res) => {
      try {
        const { id } = req.params;
        const {
          building_id,
          room_name,
          room_type,
          description,
          price,
          size,
          service,
          amenities,
          limit_person,
          status,
        } = req.body;

        // Ki·ªÉm tra n·∫øu `id` kh√¥ng h·ª£p l·ªá
        if (!mongoose.Types.ObjectId.isValid(id)) {
          return res.status(400).json({ message: "ID kh√¥ng h·ª£p l·ªá" });
        }

        // T√¨m ph√≤ng theo ID
        const room = await Room.findById(id);
        if (!room) {
          return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ph√≤ng" });
        }

        // L∆∞u ƒë∆∞·ªùng d·∫´n ·∫£nh v√† video
        const photos_room = req.files.photos_room
          ? req.files.photos_room.map((file) => file.path)
          : room.photos_room; // Gi·ªØ nguy√™n n·∫øu kh√¥ng c√≥ ·∫£nh m·ªõi
        const video_room = req.files.video_room
          ? req.files.video_room.map((file) => file.path)
          : room.video_room; // Gi·ªØ nguy√™n n·∫øu kh√¥ng c√≥ video m·ªõi

        // X·ª≠ l√Ω m·∫£ng amenities v√† service
        const parsedAmenities = Array.isArray(amenities)
          ? amenities
          : typeof amenities === "string"
          ? JSON.parse(amenities)
          : room.amenities;
        const parsedService = Array.isArray(service)
          ? service
          : typeof service === "string"
          ? JSON.parse(service)
          : room.service;

        // C·∫≠p nh·∫≠t th√¥ng tin ph√≤ng
        room.building_id = building_id || room.building_id;
        room.room_name = room_name || room.room_name;
        room.room_type = room_type || room.room_type;
        room.description = description || room.description;
        room.price = price || room.price;
        room.size = size || room.size;
        room.video_room = video_room;
        room.photos_room = photos_room;
        room.service = parsedService;
        room.amenities = parsedAmenities;
room.limit_person = limit_person || room.limit_person;
        room.status = status !== undefined ? status : room.status;
        room.updated_at = new Date().toISOString();

        // L∆∞u th√¥ng tin ƒë√£ c·∫≠p nh·∫≠t
        const updatedRoom = await room.save();

        res.status(200).json({
          message: "C·∫≠p nh·∫≠t ph√≤ng th√†nh c√¥ng",
          room: updatedRoom,
        });
      } catch (error) {
        console.error(error);
        res
          .status(500)
          .json({ message: "L·ªói khi c·∫≠p nh·∫≠t ph√≤ng", error: error.message });
      }
    }
  );

  // API l·∫•y danh s√°ch d·ªãch v·ª• c·ªßa m·ªôt t√≤a nh√† c·ª• th·ªÉ
router.get('/building/:id/services', async (req, res) => {
  const { id } = req.params;

  // Ki·ªÉm tra ID l√† ObjectId h·ª£p l·ªá
  if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ error: 'Invalid building ID.' });
  }

  try {
      // T√¨m t√≤a nh√† theo ID v√† populate d·ªãch v·ª•
      const building = await Building.findById(id)
          .populate('service', 'name');
    const buildingId = req.params.buildingId;
    const currentMonth = String(new Date().getMonth() + 1).padStart(2, '0'); // L·∫•y th√°ng hi·ªán t·∫°i
    const currentYear = new Date().getFullYear(); // L·∫•y nƒÉm hi·ªán t·∫°i

    // T√¨m c√°c ph√≤ng thu·ªôc building
    const rooms = await Room.find({
      building_id: buildingId
    }).populate('service').populate('building_id', "serviceFees").lean();

      // N·∫øu kh√¥ng t√¨m th·∫•y t√≤a nh√†
      if (!building) {
          return res.status(404).json({ error: 'Building not found.' });
      }
    // L·ªçc c√°c ph√≤ng ch∆∞a c√≥ h√≥a ƒë∆°n
    const roomsWithoutInvoice = await Promise.all(rooms.map(async (room) => {
      // T·∫°o pattern ƒë·ªÉ t√¨m h√≥a ƒë∆°n trong th√°ng hi·ªán t·∫°i
      const monthPattern = `${currentYear}-${currentMonth}`;

      const existingInvoice = await Invoice.findOne({
        room_id: room._id,
        created_at: { $regex: monthPattern }
      });

      // Tr·∫£ v·ªÅ danh s√°ch d·ªãch v·ª• c·ªßa t√≤a nh√†
      res.status(200).json(building.service);
      if (!existingInvoice) {
        // Th√™m th√¥ng tin v·ªÅ th√°ng/nƒÉm hi·ªán t·∫°i v√†o response
        return {
          ...room,
          currentMonth,
          currentYear
        };
      }
      return null;
    }));

    const filteredRooms = roomsWithoutInvoice.filter(room => room !== null);

    res.json({
      status: 200,
      message: "L·∫•y danh s√°ch ph√≤ng ch∆∞a c√≥ h√≥a ƒë∆°n th√†nh c√¥ng",
      data: filteredRooms,
      metadata: {
        total: filteredRooms.length,
        month: currentMonth,
        year: currentYear
      }
    });
  } catch (error) {
      console.error('Error fetching building services:', error.message);
      res.status(500).json({ error: 'Failed to fetch building services. Please try again later.' });
    console.error("Error:", error);
    res.status(500).json({
      status: 500,
      message: "C√≥ l·ªói x·∫£y ra",
      error: error.message
    });
  }
});

router.get('/RoomsForBuilding/:building_id', async (req, res) => {
  try {
      // L·∫•y building_id t·ª´ tham s·ªë URL
      const { building_id } = req.params;

      // T√¨m t·∫•t c·∫£ ph√≤ng trong t√≤a nh√† ƒë√≥
      const rooms = await Room.find({ building_id }).select('room_name room_type price status');

      // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ ph√≤ng n√†o
      if (!rooms || rooms.length === 0) {
          // N·∫øu kh√¥ng c√≥ ph√≤ng, tr·∫£ v·ªÅ danh s√°ch r·ªóng
          return res.json([]);
      }

      // Tr·∫£ v·ªÅ k·∫øt qu·∫£ l√† danh s√°ch c√°c ph√≤ng v·ªõi c√°c tr∆∞·ªùng ƒë∆∞·ª£c ch·ªçn
      return res.status(200).json(rooms);
  } catch (error) {
      // N·∫øu c√≥ l·ªói x·∫£y ra
      return res.status(500).json({ message: 'Server error', error: error.message });
  }
});

module.exports = router
