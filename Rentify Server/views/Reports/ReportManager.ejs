<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quản lý người dùng</title>
    <link rel="stylesheet" href="../../assets/style/UserManagement.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastify-js/1.12.0/toastify.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastify-js/1.12.0/toastify.min.js"></script>
</head>
<style>
    .status-pending {
        color: #f8d568;
    }

    .status-completed {
        color: #28a745;
    }

    .status-unknown {
        color: #b0b0b0;
    }
    th:nth-child(5), td:nth-child(5) {
        width: 60%; /* Giới hạn độ rộng cột "Loại vấn đề" */
        /* background-color: #f20; */
    }
    .issue-type {
        border: 1px solid #d3d3d3; /* Border xám nhạt */
        padding: 5px;
        border-radius: 4px;
        display: inline-block; /* Đảm bảo không chiếm toàn bộ chiều rộng */
        width: 70%; /* Cài đặt chiều rộng khoảng 70% */
        text-align: center; /* Căn giữa chữ */
        margin: 0 auto; /* Căn giữa */
    }
    .table tbody tr {
       border-bottom: 1px solid #d3d3d3; /* Màu xám nhạt */
    }
    .table tbody tr td {
        vertical-align: middle; /* Căn giữa theo chiều dọc */
    }
    .search-input-container{
        border: 1px solid #d3d3d3; 
        border-radius: 5px;
        height: 33px;
    }
    .search-input{
        border-radius: 5px;
    }
    .border-bottom {
        border-bottom: 1px solid #d3d3d3;
    }
    .action-btn {
    width: 70px; /* Đặt độ rộng cố định */
    text-align: center;
    padding: 5px 0; /* Căn chỉnh nội dung cho đẹp */
    }

    /* Kiểu nút khi status là 1 (chỉ có viền và chữ màu xanh nhạt) */
    .view-btn {
        background-color: transparent; /* Không có nền */
        border: 1px solid #28a745; /* Viền xanh nhạt */
        color: #28a745; /* Chữ xanh nhạt */
    }
    .view-btn-pending {
        background-color: #f8d568; /* Không có nền */
        border: 1px solid #f8d568;
        color: #fff; /* Chữ xanh nhạt */
    }

    /* CSS cho phân trang */
    .pagination button {
        margin: 0 5px;
        padding: 5px 10px;
    }

    .pagination button.active {
        background-color: #007bff;
        color: white;
    }

    .pagination button:disabled {
        background-color: #d3d3d3;
        cursor: not-allowed;
    }
    .search-input{
        padding-right: 35px;
    }
    .search-icon {
        margin-right: -12px;
        padding: 5px;
        color: #ffffff; 
    }

</style>

<body>

    <div class="container">
        <div class="table-container">
            <h4>Quản lý báo cáo</h4>
            <div class="search-input-container1 d-flex align-items-center">
                <div class="dropdown input-spacing"> <!-- Thêm lớp input-spacing -->
                    <button id="issueTypeButton" class="btn text-white shadow-button dropdown-toggle"
                        style="font-size: 0.75rem; background-color: #007bff; width: 100px;" data-toggle="dropdown"
                        aria-haspopup="true" aria-expanded="false">
                        Loại vấn đề
                    </button>
                    <div class="dropdown-menu" aria-labelledby="issueTypeButton">
                        <a class="dropdown-item " href="#" onclick="updateDropdownText('issueTypeButton', 'Loại vấn đề'); filterByType('Unknown')">Loại vấn đề</a>
                        <a class="dropdown-item border-bottom" href="#" onclick="updateDropdownText('issueTypeButton', 'Bài đăng'); filterByType('post')">Bài đăng</a>
                        <a class="dropdown-item border-bottom" href="#" onclick="updateDropdownText('issueTypeButton', 'Phòng ở'); filterByType('room')">Phòng ở</a>
                        <a class="dropdown-item" href="#" onclick="updateDropdownText('issueTypeButton', 'Dịch vụ'); filterByType('service')">Dịch vụ</a>
                    </div>
                </div>
                <div class="dropdown input-spacing">
                    <button id="statusButton" class="btn text-white shadow-button dropdown-toggle"
                        style="font-size: 0.75rem; background-color: #007bff; width: 100px;" data-toggle="dropdown"
                        aria-haspopup="true" aria-expanded="false">
                        Trạng thái
                    </button>
                    <div class="dropdown-menu" aria-labelledby="statusButton">
                        <a class="dropdown-item border-bottom" href="#" onclick="updateDropdownText('statusButton', 'Trạng thái'); filterByStatus(-1)">Trạng thái</a>
                        <a class="dropdown-item border-bottom" href="#" onclick="updateDropdownText('statusButton', 'Chưa xử lý'); filterByStatus(0)">Chưa xử lý</a>
                        <a class="dropdown-item " href="#" onclick="updateDropdownText('statusButton', 'Đã xử lý'); ; filterByStatus(1)">Đã xử lý</a>
                    </div>
                </div>
                <div class="search-input-container">
                    <input type="text" id="search-input" placeholder="Nhập tên để tìm kiếm" class="search-input" />
                    <span class="search-icon">&#128269;</span>
                </div>
            </div>


            <table class="table">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Người tạo báo cáo</th>
                        <th>Tiêu đề</th>
                        <th>Ngày tạo</th>
                        <th>Loại vấn đề</th>
                        <th style="width: 100px;">Trạng thái</th>
                        <th style="width: 100px;">Act</th>
                    </tr>
                </thead>
                <tbody id="report-table-body">
                    <!-- Dữ liệu người dùng sẽ được thêm vào đây -->
                </tbody>
            </table>
            <div class="pagination" id="pagination">
                <!-- Dữ liệu phân trang sẽ được thêm vào đây -->
            </div>
        </div>
    </div>

    <!-- Add jQuery, Popper.js, and Bootstrap JavaScript in the correct order -->
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script>
        let reports = [];
        let selectedType = '';
        let selectedStatus = -1;
        let page = 1;
        const pageSize = 6;

        // Function to fetch report data
        const fetchReports = async () => {
            try {
                const response = await fetch('http://localhost:3000/api/reports_all');
                const data = await response.json();
                if (response.ok) {
                    reports = data;
                    console.log(reports)
                    renderTable();
                } else {
                    throw new Error(`HTTP error! status: ${response.status}`);
                    Toastify({
                        text: "Failed to load reports",
                        style: {
                            background: "linear-gradient(to right, #ff5f6d, #ffc371)"
                        }
                    }).showToast();
                }
            } catch (error) {
                console.error("Error fetching reports:", error);
            }
        };

        // Function to select report type
        // const selectType = (type) => {
        //     selectedType = type;
        //     renderTable();
        // };
        function updateDropdownText(buttonId, text) {
            document.getElementById(buttonId).innerText = text;
        }

        const filterByType = (type) => {
            selectedType = type === 'Unknown' ? '' : type; // Reset if 'Unknown' is selected
            renderTable();
        };

        const filterByStatus = (status) => {
            selectedStatus = status === -1 ? -1 : status; // Reset if -1 is selected
            renderTable();
        };

        // Function to render report table
        const renderTable = () => {
            const filteredReports = reports.filter(report =>
                (selectedType === '' || report.type === selectedType) &&
                (selectedStatus === -1 || report.status === selectedStatus)
            );

            const displayReports = filteredReports.slice(
                (page - 1) * pageSize,
                page * pageSize
            );

            const reportTable = document.getElementById('report-table-body');
            reportTable.innerHTML = '';

            displayReports.forEach((report, index) => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${index + 1 + (page - 1) * pageSize}</td>
                    <td>${report.user_id.name ?? 'N/A'}</td>
                    <td>${report.title_support ?? 'N/A'}</td>
                    <td>${report.created_at ?? 'N/A'}</td>
                    <td>${getIssueType(report.type) ?? 'N/A'}</td>
                    <td>${getStatus(report.status) ?? 'N/A'}</td>
                    <td>
                        <button class="btn btn-primary btn-sm action-btn ${report.status === 1 ? 'view-btn' : 'view-btn-pending'}" onclick="toggleEditForm('${report._id}')">
                            ${report.status === 0 ? 'Xử lý' : 'Xem'}
                        </button>
                    </td>
                `;
                reportTable.appendChild(row);
            });
            const totalPages = Math.ceil(filteredReports.length / pageSize);
            renderPagination(totalPages);
        };
        function getIssueType(type) {
            switch (type) {
                case 'room':
                    return '<span class="issue-type">Phòng ở</span>';
                case 'service':
                    return '<span class="issue-type">Dịch Vụ</span>';
                case 'post':
                    return '<span class="issue-type">Bài Đăng</span>';
                default:
                    return '<span class="issue-type">Unknown</span>';
                }
        }
        function getStatus(status) {
            switch (status) {
                case 0:
                    return '<span class="status-pending">Chưa xử lý</span>';
                case 1:
                    return '<span class="status-completed">Đã xử lý</span>';
                default:
                    return '<span class="status-unknown">Unknown</span>';
            }
        }

        // Function to render pagination
        const renderPagination = (totalPages) => {
            const paginationContainer = document.getElementById('pagination');
            paginationContainer.innerHTML = '';

            // Render Previous Button
            const prevButton = document.createElement('button');
            prevButton.innerText = '«';
            prevButton.classList.add('btn', 'btn-secondary', 'btn-sm');
            prevButton.disabled = page === 1;
            prevButton.onclick = () => changePage(page - 1);
            paginationContainer.appendChild(prevButton);

            // Render Page Buttons
            for (let i = 1; i <= totalPages; i++) {
                const pageButton = document.createElement('button');
                pageButton.innerText = i;
                pageButton.classList.add('btn', 'btn-secondary', 'btn-sm');
                pageButton.onclick = () => changePage(i);
                if (i === page) {
                    pageButton.classList.add('active');
                }
                paginationContainer.appendChild(pageButton);
            }

            // Render Next Button
            const nextButton = document.createElement('button');
            nextButton.innerText = '»';
            nextButton.classList.add('btn', 'btn-secondary', 'btn-sm');
            nextButton.disabled = page === totalPages;
            nextButton.onclick = () => changePage(page + 1);
            paginationContainer.appendChild(nextButton);
        };

            // Function to change page
        const changePage = (newPage) => {
            page = newPage;
            renderTable();
        };


        // Initial data fetch
        fetchReports();
    </script>
</body>

</html>