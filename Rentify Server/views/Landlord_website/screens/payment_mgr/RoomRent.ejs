<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastify-js/1.12.0/toastify.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-datepicker@1.9.0/dist/css/bootstrap-datepicker.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap-datepicker@1.9.0/dist/js/bootstrap-datepicker.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastify-js/1.12.0/toastify.min.js"></script>
    <title>Document</title>
    <style>
        .selected {
            border: 2px solid #007bff;
            background-color: #f0f8ff;
        }

        .tab-menu {
            display: flex;
            justify-content: space-between;
            width: 100%;
            border-bottom: 1px solid #ccc;
        }

        .tab-item {
            width: 50%;
            text-align: center;
            padding: 10px 0;
            cursor: pointer;
            border-bottom: 3px solid transparent;
            color: #6c757d;
            font-weight: bold;
            transition: border-color 0.3s, color 0.3s;
        }

        .tab-item.active {
            border-bottom: 3px solid #007bff;
            color: #007bff;
        }

        .tab-item:not(.active):hover {
            color: #007bff;
        }
    </style>
</head>

<body>
    <div class="container mt-4">
        <!-- Header -->
        <div class="d-flex align-items-center mb-4 position-relative" style="height: 100px;">
            <!-- Back button -->
            <button class="btn btn-light position-absolute border"
                style="left: 0; background-color: #f4f6f6; font-weight: 600;" onclick="goBack()">
                <i class="fa fa-chevron-left" aria-hidden="true"></i> Quay lại
            </button>
            <!-- Centered title -->
            <div class="mx-auto text-center">
                <h1 class="text-primary mb-1">Quản lý tiền thuê phòng</h1>
                <p class="text-muted mb-0">Quản lý tiền thuê hàng tháng.</p>
            </div>
        </div>

        <div class="border-top column">
            <h5 class="text-primary mb-0 mt-3">Tòa nhà</h5>
            <div id="buildings-list" class="row mt-4">
                <!-- Danh sách tòa nhà sẽ được hiển thị ở đây -->
            </div>
            <!-- Chọn tháng năm không cần nhập tay -->
            <div class="border-top border-bottom">
                <div class="row mb-4 mt-4 d-flex align-items-center">
                    <div class="col-md-3">
                        <label for="monthYear" class="text-primary">Lọc theo tháng và năm:</label>
                        <input type="text" id="monthYear" class="form-control" placeholder="Chọn tháng và năm" />
                    </div>
                    <div class="col-md-4">
                        <button id="filterBtn" class="btn btn-primary mt-4">Lọc</button>
                    </div>
                </div>
            </div>

            <!-- Tab menu chọn đã thanh toán hay chưa thanh toán ở đây  -->
            <div class="tab-menu row mt-3">
                <div id="paid-tab" class="tab-item active" style="font-size: 20px" onclick="selectTab('paid')">Đã thanh toán</div>
                <div id="unpaid-tab" class="tab-item" style="font-size: 20px" onclick="selectTab('unpaid')">Chưa thanh toán</div>
            </div>
            
            <div id="invoices-container" class="mt-3">
                <!-- Danh sách hóa đơn sẽ được hiển thị ở đây -->
            </div>
        </div>

    </div>
</body>

<script>


    function goBack() { window.history.back(); }
    // 
    let userId = localStorage.getItem('user_id');
    console.log("userId :", userId)
    let buildings = [];
    let selectedBuildingId = null;
    let currentDate = new Date();
    let selectedYear = currentDate.getFullYear();
    let selectedMonth = currentDate.getMonth() + 1;
    let selectPaymentStatus = 'paid';

    // ============ Building ===========
    const getListBuildings = async () => {
        try {
            const res = await fetch(`http://localhost:3000/api/buildings_mgr/${userId}`);
            const data = await res.json();
            if (res.ok) {
                buildings = data.data;
                console.log("buildings : ", buildings)
                displayBuildings(); // Hiển thị danh sách tòa nhà khi nhận được dữ liệu
                // Mặc định chọn tòa nhà đầu tiên
                if (buildings.length > 0) {
                    selectBuilding(buildings[0]._id);
                    selectTab('paid');
                }
            } else {
                Toastify({
                    text: "Failed to load buildings",
                    style: {
                        background: "linear-gradient(to right, #ff5f6d, #ffc371)"
                    }
                }).showToast();
            }
        } catch (error) {
            console.error("Error fetching buildings:", error);
        }
    }
    getListBuildings()

    // Hàm hiển thị danh sách tòa nhà
    const displayBuildings = () => {
        const buildingsListDiv = document.getElementById('buildings-list');
        buildingsListDiv.innerHTML = ''; // Xóa nội dung cũ trước khi thêm mới

        buildings.forEach(building => {
            const buildingRow = document.createElement('div');
            buildingRow.classList.add('col-md-4', 'mb-4', 'building-item'); // Cột kiểu bootstrap

            buildingRow.innerHTML = `
                <div class="card ${selectedBuildingId === building._id ? 'selected' : ''}" data-id="${building._id}" style="font-size: 14px; padding: 10px;">
                    <div class="card-body" style="padding: 1px;">
                        <h6 class="card-title" style="font-size: 16px; margin-bottom: 8px;">${building.nameBuilding}</h6>
                        <div class="mb-0" style="font-size: 12px;">
                            <span style="font-size: small; color: #777;">Địa chỉ:</span>
                            <h6 class="card-title" style="color: #363636; font-size: 13px; margin-bottom: 0;">${building.address ?? 'N/A'}</h6>
                        </div>
                    </div>
                </div>
            `;

            // Thêm sự kiện click để chọn tòa nhà
            buildingRow.addEventListener('click', () => selectBuilding(building._id));

            buildingsListDiv.appendChild(buildingRow); // Thêm phần tử vào danh sách
        });
    }
    // Hàm để chọn tòa nhà
    const selectBuilding = (buildingId) => {
        selectedBuildingId = buildingId;
        console.log("Selected Building ID: ", selectedBuildingId);

        // Cập nhật lại giao diện để đánh dấu item đã chọn
        const buildingItems = document.querySelectorAll('.building-item .card');
        buildingItems.forEach(item => {
            item.classList.remove('selected'); // Xóa class 'selected' khỏi tất cả các item
        });

        const selectedItem = document.querySelector(`.building-item .card[data-id="${buildingId}"]`);
        if (selectedItem) {
            selectedItem.classList.add('selected'); // Thêm class 'selected' vào item được chọn
        }

        getInvoices(buildingId, selectedMonth, selectedYear, selectPaymentStatus);
    }
    // ============ Tabs ===============
    function selectTab(tab) {
        const tabs = document.querySelectorAll('.tab-item');
        tabs.forEach(tabItem => tabItem.classList.remove('active'));  // Gỡ bỏ active khỏi tất cả các tab

        if (tab === 'paid') {
            document.getElementById('paid-tab').classList.add('active');  // Đánh dấu tab đã thanh toán là active
            selectPaymentStatus = 'paid';  // Cập nhật trạng thái thanh toán
        } else if (tab === 'unpaid') {
            document.getElementById('unpaid-tab').classList.add('active');  // Đánh dấu tab chưa thanh toán là active
            selectPaymentStatus = 'unpaid';  // Cập nhật trạng thái thanh toán
        }

        // Gọi lại hàm getInvoices để lấy hóa đơn của tab đã chọn
        getInvoices(selectedBuildingId, selectedMonth, selectedYear, selectPaymentStatus);
    }
    selectTab('paid');

    // ============ Invoice ==============
    async function getInvoices(buildingId, selectedMonth, selectedYear, selectPaymentStatus) {
        try {
            const queryParams = new URLSearchParams({
                month: selectedMonth,
                year: selectedYear,
                paymentStatus: selectPaymentStatus
            });
            const res = await fetch(`http://localhost:3000/api/buildings_mgr/${selectedBuildingId}/invoices?${queryParams.toString()}`);
            const data = await res.json();

            if (res.ok) {
                displayInvoices(selectPaymentStatus === 'paid' ? 'Đã thanh toán' : 'Chưa thanh toán',
                    selectPaymentStatus === 'paid' ? data.paidInvoices : data.unpaidInvoices);
            } else {
                console.error('Không thể lấy dữ liệu hóa đơn:', data.message);
            }
        } catch (error) {
            console.error('Lỗi khi lấy hóa đơn:', error);
        }
    }

    function displayInvoices(title, invoices) {
        const container = document.getElementById('invoices-container');
        container.innerHTML = ''; // Xóa hết nội dung cũ trong container

        let html = `<h3></h3>`; // Cập nhật tiêu đề

        if (invoices.length === 0) {
            html += `<p>Không có hóa đơn.</p>`;
        } else {
            html += `<div class="row">`; // Sử dụng lớp Bootstrap 'row' để tạo hàng
            invoices.forEach(invoice => {
                let paymentStatusClass = '';
                let paymentStatusText = '';

                if (invoice.payment_status === 'paid') {
                    paymentStatusClass = 'text-success';  // Màu xanh lá cây
                    paymentStatusText = 'Đã thanh toán';
                } else {
                    paymentStatusClass = 'text-danger';  // Màu đỏ (hoặc có thể dùng 'text-warning' cho vàng)
                    paymentStatusText = 'Chưa thanh toán';
                }
                html += `<div class="col-md-4 mb-4"> <!-- Mỗi mục chiếm 1/3 chiều rộng trên màn hình lớn --> 
                            <div class="border p-3 rounded shadow-sm">
                                <strong>Phòng: ${invoice.room_id.room_name}</strong><br>
                                <div class="mb-0 mt-1" style="font-size: 14px;">
                                    <span style="font-size: small; color: #777;padding-right:5px;">Thành tiền:</span>
                                    <span>${invoice.amount} VND</span><br>
                                </div>
                                <div class="mb-0 mt-1" style="font-size: 14px;">
                                    <span style="font-size: small; color: #777; padding-right:9px;">Trạng thái:</span>
                                    <span class="${paymentStatusClass}"> ${paymentStatusText}</span>
                                </div>
                            </div>
                        </div>`;
            });
            html += `</div>`;
        }
        container.innerHTML = html;  // Cập nhật lại nội dung của container
    }

    getInvoices(selectedBuildingId, selectedMonth, selectedYear, selectPaymentStatus)

    // =====================
</script>

</html>