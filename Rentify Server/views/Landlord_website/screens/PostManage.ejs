<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastify-js/1.12.0/toastify.min.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.11.3/css/lightbox.min.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.11.3/js/lightbox.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastify-js/1.12.0/toastify.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <title>Post</title>
    <style>
        .selected {
            border: 2px solid #007bff;
            background-color: #f0f8ff;
        }

        .custom-carousel-btn {
            width: 40px;
            height: 40px;
            background-color: white;
            /* Nền trắng */
            border-radius: 50%;
            /* Bo tròn */
            display: flex;
            justify-content: center;
            align-items: center;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            /* Hiệu ứng bóng */
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            /* Hiệu ứng hover */
        }

        .custom-carousel-btn:hover {
            transform: scale(1.1);
            /* Phóng to khi hover */
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
            /* Bóng đậm hơn */
        }

        .custom-arrow {
            filter: invert(0);
            /* Màu đen cho icon */
            width: 16px;
            height: 16px;
        }

        .carousel-control-prev .custom-arrow {
            transform: translateX(-2px);
            /* Dịch trái nhẹ cho icon */
        }

        .carousel-control-next .custom-arrow {
            transform: translateX(2px);
            /* Dịch phải nhẹ cho icon */
        }
    </style>
</head>

<body>
    <div class="container mt-4">
        <!-- Header -->
        <div class="d-flex align-items-center justify-content-between mb-4 position-relative" style="height: 100px;">
            <!-- Back button -->
            <div></div>

            <!-- Centered title -->
            <div class="mx-auto text-center">
                <h1 class="text-primary mb-1">Quản lý bài đăng</h1>
                <p class="text-muted mb-0">Quản lý bài đăng liên quan đến tòa nhà.</p>
            </div>

            <!-- Add button -->
            <button class="btn btn-primary border" style="font-weight: 600;" onclick="openPostDialog()">
                Thêm bài đăng
            </button>
        </div>

        <div class="border-top column">
            <h5 class="text-primary mb-0 mt-3">Tòa nhà</h5>
            <div id="buildings-list" class="row mt-4">
                <!-- Danh sách tòa nhà sẽ được hiển thị ở đây -->
            </div>

            <div class="border-top">
                <div class="row mb-4 mt-4 d-flex align-items-center">
                    <!-- Dropdown chọn trạng thái -->
                    <div class="col-md-4">
                        <label for="status" class="form-label">Trạng thái</label>
                        <select class="form-select form-select-lg mb-3" id="status" aria-label="Chọn trạng thái">
                            <option selected value="active">Đang hoạt động</option>
                            <option value="violation">Vi phạm</option>
                        </select>
                    </div>

                    <div class="col-md-4">
                        <label for="month-year" class="form-label">Lọc theo tháng</label>
                        <select class="form-select form-select-lg mb-3" id="month-year" aria-label="Chọn tháng và năm">
                            <option selected value="">-- Chọn tháng --</option>
                        </select>
                    </div>

                    <!-- Lọc theo năm -->
                    <div class="col-md-4">
                        <label for="year" class="form-label">Lọc theo năm</label>
                        <select class="form-select form-select-lg mb-3" id="year" aria-label="Chọn năm">
                            <option selected value="">-- Chọn năm --</option>
                        </select>
                    </div>
                </div>
            </div>

            <div id="post-container" class="mt-3">
                <div id="today-container"></div>
                <!-- Danh sách sẽ được hiển thị ở đây -->
                <div id="all-container"></div>
            </div>

        </div>
    </div>

    <!-- Dialog Add , update post -->
    <div id="postDialog"
        style="display: none; position: fixed; top: 20px; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); justify-content: center; align-items: center;">
        <div
            style="background: white; padding: 20px; border-radius: 8px; width: 75%; max-height: 85%; overflow-y: auto;">
            <h3 id="postFormTitle" style="margin-bottom: 20px;">Tạo bài đăng</h3>

            <!-- Select Building -->
            <div class="row" style="display: flex; align-items: center; margin-top: 10px;  padding-left: 15px;">
                <!-- Building Dropdown -->
                <div style="margin-right: 60px;">
                    <label style="width: 150px;" for="buildingSelect">Tòa nhà:</label>
                    <select id="buildingSelect" onchange="onBuildingChange()">
                        <!-- Options will be dynamically populated -->
                    </select>
                </div>

                <!-- Room Dropdown -->
                <div>
                    <label style="width: 150px;" for="roomSelect">Phòng:</label>
                    <select id="roomSelect">
                        <!-- Options will be dynamically populated -->
                    </select>
                </div>
            </div>

            <!-- Title -->
            <div class="row align-items-center" style="margin-top: 10px;">
                <label style="width: 150px; margin-left: 15px;" for="title">Tiêu đề:</label>
                <input type="text" id="title" class="form-control" placeholder="Nhập tiêu đề bài đăng"
                    style=" margin-left: 10px; margin-right: 10px;">
            </div>

            <!-- Content -->
            <div class="row align-items-center" style="margin-top: 10px;">
                <label style="width: 150px; margin-left: 15px;" for="content">Nội dung:</label>
                <textarea id="content" style=" margin-left: 10px; margin-right: 10px;" class="form-control"
                    placeholder="Nhập nội dung bài đăng" rows="4"></textarea>
            </div>

            <!-- Select Video -->
            <div class="row align-items-center" style="margin-top: 10px;">
                <label style="width: 150px; margin-left: 15px;" for="videoSelect">Chọn video:</label>
                <input type="file" style=" margin-left: 10px; margin-right: 10px;" id="videoSelect" accept="video/*"
                    class="form-control">
            </div>

            <!-- Select Images -->
            <div class="row align-items-center" style="margin-top: 10px;">
                <label style="width: 150px; margin-left: 15px;" for="imageSelect">Chọn ảnh:</label>
                <input type="file" id="imageSelect" accept="image/*" multiple class="form-control"
                    style=" margin-left: 10px; margin-right: 10px;">
            </div>

            <input type="hidden" id="">

            <!-- Actions -->
            <div style="margin-top: 20px; display: flex; justify-content: space-between;">
                <button class="btn btn-secondary" onclick="closePostDialog()">Đóng</button>
                <button id="postFormButton" class="btn btn-primary" onclick="createPost()">Tạo bài đăng</button>
            </div>
        </div>
    </div>
</body>
<script>
    let userId = localStorage.getItem('user_id');
    console.log("userId :", userId)
    let buildings = [];
    let isMonthLoad = true;
    let selectedBuildingId = null;
    let currentDate = new Date();
    let selectedYear = currentDate.getFullYear();
    let selectedMonth = currentDate.getMonth() + 1;
    let selectStatus = 0;

    const getListBuildings = async () => {
        try {
            const res = await fetch(`http://localhost:3000/api/buildings_mgr/${userId}`);
            const data = await res.json();
            if (res.ok) {
                buildings = data.data;
                console.log("buildings : ", buildings)
                displayBuildings(); // Hiển thị danh sách tòa nhà khi nhận được dữ liệu
                // Mặc định chọn tòa nhà đầu tiên
                if (buildings.length > 0) {
                    selectBuilding(buildings[0]._id);
                }
            } else {
                Toastify({
                    text: "Failed to load buildings",
                    style: {
                        background: "linear-gradient(to right, #ff5f6d, #ffc371)"
                    }
                }).showToast();
            }
        } catch (error) {
            console.error("Error fetching buildings:", error);
        }
    }
    getListBuildings()

    const displayBuildings = () => {
        const buildingsListDiv = document.getElementById('buildings-list');
        buildingsListDiv.innerHTML = ''; // Xóa nội dung cũ trước khi thêm mới

        buildings.forEach(building => {
            const buildingRow = document.createElement('div');
            buildingRow.classList.add('col-md-2', 'mb-4', 'building-item'); // Cột kiểu bootstrap

            buildingRow.innerHTML = `
                <div class="card ${selectedBuildingId === building._id ? 'selected' : ''}" data-id="${building._id}" style="font-size: 14px; padding: 10px;">
                    <div class="card-body" style="padding: 1px;">
                        <h6 class="card-title" style="font-size: 16px; margin-bottom: 8px;">${building.nameBuilding}</h6>
                    </div>
                </div>
            `;

            // Thêm sự kiện click để chọn tòa nhà
            buildingRow.addEventListener('click', () => selectBuilding(building._id));

            buildingsListDiv.appendChild(buildingRow); // Thêm phần tử vào danh sách
        });
    }
    // Hàm để chọn tòa nhà
    const selectBuilding = (buildingId) => {
        selectedBuildingId = buildingId;
        console.log("Selected Building ID: ", selectedBuildingId);

        // Cập nhật lại giao diện để đánh dấu item đã chọn
        const buildingItems = document.querySelectorAll('.building-item .card');
        buildingItems.forEach(item => {
            item.classList.remove('selected'); // Xóa class 'selected' khỏi tất cả các item
        });

        const selectedItem = document.querySelector(`.building-item .card[data-id="${buildingId}"]`);
        if (selectedItem) {
            selectedItem.classList.add('selected'); // Thêm class 'selected' vào item được chọn
        }
        if (isMonthLoad) {
            getPostList(selectedBuildingId, selectedMonth, selectedYear, selectStatus)
        } else {
            getPostListYear(selectedBuildingId, selectedYear, selectStatus)
        }
    }

    // get post list 
    async function getPostList(buildingId, selectedMonth, selectedYear, selectStatus) {
        try {
            const queryParams = new URLSearchParams({
                month: selectedMonth,
                year: selectedYear,
                status: selectStatus,
            })
            const res = await fetch(`http://localhost:3000/api/posts_mgr/${buildingId}/posts?${queryParams.toString()}`)
            const data = await res.json();
            if (res.ok) {
                displayPost(selectStatus === 0 ? data.isPostActive : data.isPostBan);
            } else {
                console.error('Không thể lấy dữ liệu post:', data.message);
            }
        } catch (error) {
            console.error('Lỗi khi lấy danh sach post:', error);
        }
    }

    async function getPostListYear(buildingId, selectedYear, selectStatus) {
        try {
            const queryParams = new URLSearchParams({
                year: selectedYear,
                status: selectStatus,
            })
            const res = await fetch(`http://localhost:3000/api/posts_mgr/${buildingId}/posts/year?${queryParams.toString()}`)
            const data = await res.json();
            if (res.ok) {
                console.log(data.isPostActive)
                displayPost(selectStatus === 0 ? data.isPostActive : data.isPostBan);
            } else {
                console.error('Không thể lấy dữ liệu post:', data.message);
            }
        } catch (error) {
            console.error('Lỗi khi lấy danh sach post:', error);
        }
    }

    function displayPost(posts) {
        const container = document.getElementById('all-container');
        container.innerHTML = '';
        let html = `<h3></h3>`;

        if (posts.length === 0) {
            html += `<p>Không có bài viết nào.</p>`;
        } else {
            html += `<div class="row">`;
            posts.forEach(post => {
                let postStatusClass = '';
                let postStatusText = '';

                if (post.status === 0) {
                    postStatusClass = 'text-success';
                    postStatusText = 'Đang hoạt động';
                } else {
                    postStatusClass = 'text-danger';
                    postStatusText = 'Vi phạm';
                }
                html += `<div class="col-6 mb-4"> 
                            <div class="border p-3 rounded shadow-sm justify-content-between align-items-center">
                                    <div class="left-side">
                                        <div class="mb-0 mt-1" style="font-size: 12px;">
                                            <span>${new Date(post.created_at).toLocaleString('vi-VN')}</span>
                                        </div>
                                        <strong>${post.title}</strong><br>

                                        <!-- Ô video -->
                                        <div class="video-container mt-2 mb-2">
                                            <video class="w-100 rounded" controls style="aspect-ratio: 16/9;">
                                                <source src="${post.video}" type="video/mp4">
                                                Trình duyệt của bạn không hỗ trợ video.
                                            </video>
                                        </div>

                                        <!-- Slider ảnh -->
                                        <div class="photo-slider mt-2">
                                            <div id="photoCarousel${post._id}" class="carousel slide" data-bs-ride="carousel">
                                                <!-- Indicators -->
                                                <div class="carousel-indicators">
                                                    ${post.photo.map((_, index) => `
                                                        <button type="button" data-bs-target="#photoCarousel${post._id}" data-bs-slide-to="${index}" class="${index === 0 ? 'active' : ''}" aria-current="true"></button>
                                                    `).join('')}
                                                </div>
                                                
                                                <!-- Ảnh -->
                                                <div class="carousel-inner rounded" style="aspect-ratio: 16/9;">
                                                    ${post.photo.map((photo, index) => `
                                                        <div class="carousel-item ${index === 0 ? 'active' : ''}">
                                                            <img src="${photo}" class="d-block w-100" alt="Ảnh ${index + 1}">
                                                        </div>
                                                    `).join('')}
                                                </div>
                                                
                                                <!-- Nút điều khiển -->
                                                <button class="carousel-control-prev custom-carousel-btn" type="button" data-bs-target="#photoCarousel${post._id}" data-bs-slide="prev">
                                                    <span class="carousel-control-prev-icon custom-arrow" aria-hidden="true"></span>
                                                    <span class="visually-hidden">Trước</span>
                                                </button>
                                                <button class="carousel-control-next custom-carousel-btn" type="button" data-bs-target="#photoCarousel${post._id}" data-bs-slide="next">
                                                    <span class="carousel-control-next-icon custom-arrow" aria-hidden="true"></span>
                                                    <span class="visually-hidden">Tiếp</span>
                                                </button>
                                            </div>
                                        </div>

                                        <div class="mb-0 mt-1" style="font-size: 14px;">
                                            <span style="font-size: small; color: #777; padding-right:9px;">Phòng:</span>
                                            <span>${post.room_id.room_name ?? 'Unknown'}</span>
                                        </div>
                                        <div class="mb-0 mt-1" style="font-size: 14px;">
                                            <span style="font-size: small; color: #777;padding-right:5px;">Nội dung:</span>
                                            <span>${post.content ?? 'Unknown'}</span><br>
                                        </div>
                                        <div class="mb-0 mt-1" style="font-size: 14px;">
                                            <span style="font-size: small; color: #777;padding-right:5px;">Giá:</span>
                                            <span>${post.room_id.price} VND</span><br>
                                        </div>
                                        <div class="mb-0 mt-1" style="font-size: 14px;">
                                            <span style="font-size: small; color: #777;padding-right:5px;">Địa chỉ:</span>
                                            <span>${post.building_id.address}</span><br>
                                        </div>
                                        <div class="mb-0 mt-1" style="font-size: 14px;">
                                            <span style="font-size: small; color: #777; padding-right:9px;">Trạng thái:</span>
                                            <span class="${postStatusClass}">${postStatusText}</span>
                                        </div>
                                    </div>

                                    
                                    <div class="d-flex flex-row gap-2 mt-2">
                                        <button class="btn btn-primary btn-sm mt-2 flex-fill" onclick="openUpdatePostForm('${post._id}')">Cập nhật</button>
                                        <button class="btn btn-danger mx-2 btn-sm mt-2 flex-fill" onclick="deletePost('${post._id}')">Xóa</button>
                                        <button class="btn btn-warning btn-sm mt-2 flex-fill" style="color: #fff;" onclick="banPost('${post._id}')">Cấm đăng</button>
                                    </div>
                                </div>
                        </div>`;
            });
            html += `</div>`;
        }
        container.innerHTML = html;
    }
    getPostList(selectedBuildingId, selectedMonth, selectedYear, selectStatus)

    // ============= filter =============

    document.addEventListener('DOMContentLoaded', function () {
        let label = document.getElementById('month-year-label');
        label.textContent = `Lọc theo tháng (${selectedYear})`;
    });
    // Tạo dropdown tháng
    const monthYearDropdown = document.getElementById('month-year');
    for (let month = 1; month <= 12; month++) {
        const monthOption = document.createElement('option');
        const formattedMonth = String(month).padStart(2, '0');  // Đảm bảo là 2 chữ số
        monthOption.value = `${formattedMonth}/${selectedYear}`;
        monthOption.textContent = `${formattedMonth}/${selectedYear}`;

        // Chọn tháng hiện tại mặc định
        if (month === selectedMonth) {
            monthOption.selected = true;
        }

        monthYearDropdown.appendChild(monthOption);
    }
    // Tạo dropdown năm
    const yearDropdown = document.getElementById('year');
    const yearsToDisplay = 5; // Hiển thị 5 năm gần nhất
    for (let i = 0; i < yearsToDisplay; i++) {
        const yearOption = document.createElement('option');
        const year = selectedYear - i;
        yearOption.value = year;
        yearOption.textContent = year;
        yearDropdown.appendChild(yearOption);
    }
    // Hàm xử lý sự kiện chọn tháng
    monthYearDropdown.addEventListener("change", function () {
        if (monthYearDropdown.value !== "") {
            isMonthLoad = true
            yearDropdown.value = "";
            selectedMonth = parseInt(monthYearDropdown.value);
            selectedYear = currentDate.getFullYear();
        }
        getPostList(selectedBuildingId, selectedMonth, selectedYear, selectStatus)
    });

    // Hàm xử lý sự kiện chọn năm
    yearDropdown.addEventListener("change", function () {
        if (yearDropdown.value !== "") {
            isMonthLoad = false
            monthYearDropdown.value = "";
            selectedYear = parseInt(yearDropdown.value);
            selectedMonth = currentDate.getMonth() + 1;
        }
        getPostList(selectedBuildingId, selectedMonth, selectedYear, selectStatus)
    });

    // =================== CRUD =========================

    let rooms = [];

    const getRooms = async (building_id) => {
        try {
            const res = await fetch(`http://localhost:3000/api/buildings_mgr_rooms/${building_id}`);
            const data = await res.json();
            if (res.ok) {
                rooms = data.data;  // Lưu lại danh sách phòng
                console.log("rooms : ", rooms);
            } else {
                Toastify({
                    text: "Failed to load rooms",
                    style: {
                        background: "linear-gradient(to right, #ff5f6d, #ffc371)"
                    }
                }).showToast();
            }
        } catch (error) {
            console.error("Error fetching rooms:", error);
        }
    }

    function openPostDialog() {
        console.log("open dialog add");
        populateBuildings();
        document.getElementById('postDialog').style.display = 'flex';
    }

    function closePostDialog() {
        document.getElementById('title').value = "";
        document.getElementById('content').value = "";
        document.getElementById('videoSelect').value = "";
        document.getElementById('imageSelect').value = "";

        document.getElementById('buildingSelect').selectedIndex = 0;
        document.getElementById('roomSelect').selectedIndex = 0;

        document.getElementById('postDialog').style.display = "none";
    }

    // DropDown tòa nhà
    function populateBuildings() {
        const buildingSelect = document.getElementById('buildingSelect');
        buildingSelect.innerHTML = buildings.map(building => `<option value="${building._id}">${building.nameBuilding}</option>`).join('');
        onBuildingChange();  // Gọi onBuildingChange để load phòng cho tòa nhà đầu tiên
    }
    // Xử lý sự kiện thay đổi tòa nhà
    async function onBuildingChange() {
        const buildingId = document.getElementById('buildingSelect').value;
        const selectedBuilding = buildings.find(building => building._id === buildingId);
        if (selectedBuilding) {
            staffId = selectedBuilding.manager_id; // Gán manager_id của tòa nhà cho staffId
            console.log("Staff ID set to:", staffId);
        }
        await getRooms(buildingId);  // Lấy danh sách phòng từ API

        const roomSelect = document.getElementById('roomSelect');
        roomSelect.innerHTML = rooms.map(room => `<option value="${room._id}" data-price="${room.price}">${room.room_name}</option>`).join('');

        onRoomChange();
    }

    // Xử lý sự kiện thay đổi phòng
    function onRoomChange() {
        const roomSelect = document.getElementById('roomSelect');
        const selectedRoomPrice = roomSelect.options[roomSelect.selectedIndex].dataset.price;
        document.getElementById('roomPrice').value = selectedRoomPrice;
    }

    async function createPost(params) {
        if (!validateInputs()) {
            return;
        }

        const buildingId = document.getElementById('buildingSelect').value;
        const roomId = document.getElementById('roomSelect').value;
        const title = document.getElementById('title').value
        const content = document.getElementById('content').value
        const video = document.getElementById('videoSelect').value
        const photo = document.getElementById('imageSelect').value


        const post = {
            user_id: userId,
            building_id: buildingId,
            room_id: roomId,
            title: title,
            content: content,
            status: 0,
            video: video,
            photo: photo,
            post_type: "rent",
            created_at: new Date().toISOString()
        }

        const postId = document.getElementById("postId").value;
        try {
            const url = postId
                ? ``
                : "";
            const method = postId ? "PUT" : "POST";

            const res = await fetch(url, {
                method,
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(post)
            });

            if (res.ok) {
                // if (isMonthLoad) {
                //     getInvoices(selectedBuildingId, selectedMonth, selectedYear, selectPaymentStatus, selectedTypeInvoice);
                // } else {
                //     getInvoicesYear(selectedYear, selectPaymentStatus, selectedTypeInvoice)
                // }
                closePostDialog();
                Toastify({
                    text: "Thành công",
                    style: { background: "linear-gradient(to right, #007bff, #00b8d8)" }
                }).showToast();
            } else {
                throw new Error("Không thể tạo bài đăng.");
            }

        } catch (error) {
            Toastify({
                text: "Lỗi, không thành công",
                style: { background: "linear-gradient(to right, #ff5f6d, #ffc371)" }
            }).showToast();
            console.error(error);
        }

    }

    function validateInputs() {
        const buildingId = document.getElementById('buildingSelect').value;
        const roomId = document.getElementById('roomSelect').value;
        const title = document.getElementById('title').value
        const content = document.getElementById('content').value
        const video = document.getElementById('videoSelect').value
        const photo = document.getElementById('imageSelect').value

        if (!buildingId) {
            alert("Vui lòng chọn tòa nhà.");
            return false;
        }

        if (!roomId) {
            alert("Vui lòng chọn phòng.");
            return false;
        }

        if (title === "") {
            alert("Vui lòng nhập tiêu đề.");
            return false;
        }

        if (content === "") {
            alert("Vui lòng nhập nội dung");
            return false;
        }

        if (photo.length < 0) {
            alert("Vui lòng chọn ít nhất 1 ảnh");
            return false;
        }

        return true;
    }

    async function openUpdatePostForm(postId) {

    }

    async function deletePost(postId) {

    }

    async function banPost(postId) {

    }
</script>

</html>