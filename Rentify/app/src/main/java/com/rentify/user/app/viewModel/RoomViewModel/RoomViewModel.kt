package com.rentify.user.app.viewModel.RoomViewModel

import android.content.Context
import android.net.Uri
import android.provider.MediaStore
import android.util.Log
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.viewModelScope
import com.google.gson.Gson
import com.rentify.user.app.model.AddRoomResponse
import com.rentify.user.app.model.BuildingWithRooms
import com.rentify.user.app.model.Room
import com.rentify.user.app.model.ServiceOfBuilding
import com.rentify.user.app.network.RetrofitService
import com.rentify.user.app.repository.LoginRepository.ApiResponse
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import okhttp3.MediaType.Companion.toMediaTypeOrNull
import okhttp3.MultipartBody
import okhttp3.RequestBody
import okhttp3.RequestBody.Companion.toRequestBody
import retrofit2.Response
import java.io.IOException

class RoomViewModel(private val context: Context) : ViewModel() {
    private val _roomNames = MutableLiveData<List<String>>()
    val roomNames: LiveData<List<String>> get() = _roomNames

    private val apiService = RetrofitService().ApiService
    private val _addRoomResponse = MutableLiveData<Response<AddRoomResponse>>()
    val addRoomResponse: LiveData<Response<AddRoomResponse>> get() = _addRoomResponse
    private val _rooms = MutableLiveData<List<Room>>()
    val rooms: LiveData<List<Room>> get() = _rooms
    private val _buildingWithRooms = MutableLiveData<List<BuildingWithRooms>>()
    val buildingWithRooms: LiveData<List<BuildingWithRooms>> get() = _buildingWithRooms
    private val _roomDetail = MutableLiveData<Room?>()
    val roomDetail: LiveData<Room?> get() = _roomDetail
    private val _error = MutableLiveData<String?>()
    val error: LiveData<String?> get() = _error
    private val _isLoading = MutableLiveData<Boolean>()
    val isLoading: LiveData<Boolean> = _isLoading
    private val _updateRoomResponse = MutableLiveData<ApiResponse>()
    val updateRoomResponse: LiveData<ApiResponse> get() = _updateRoomResponse
    private val _loading = MutableLiveData<Boolean>()
    val loading: LiveData<Boolean> get() = _loading
    private val _successMessage = MutableLiveData<String?>()
    val successMessage: LiveData<String?> get() = _successMessage

    private val _services = MutableLiveData<List<ServiceOfBuilding>>()
    val services: LiveData<List<ServiceOfBuilding>> get() = _services

    fun fetchServiceOfBuilding(id: String){
        viewModelScope.launch {
            try {
                val response = apiService.getServiceOfBuilding(id)
                if(response.isSuccessful){
                    _services.value = response.body()
                }else{
                    Log.e("API_ERROR", "Error fetching data: ${response.message()}")
                    _error.value = "Failed to fetch buildings: ${response.message()}"
                }
            }catch (e: Exception){
                Log.e("API_EXCEPTION", "Exception: ${e.message}", e)
                _error.value = "An error occurred: ${e.message}"
            }
        }
    }

    // API L·∫§Y DANH S√ÅCH T√íA THEO MANAGERID
    fun fetchBuildingsWithRooms(manager_id: String) {
        viewModelScope.launch {
            try {
                val response: Response<List<BuildingWithRooms>> =
                    apiService.getBuildingsWithRooms(manager_id)

                if (response.isSuccessful) {
                    _buildingWithRooms.value = response.body()
                } else {
                    Log.e("API_ERROR", "Error fetching data: ${response.message()}")
                    _error.value = "Failed to fetch buildings: ${response.message()}"
                }
            } catch (e: Exception) {
                Log.e("API_EXCEPTION", "Exception: ${e.message}", e)
                _error.value = "An error occurred: ${e.message}"
            }
        }
    }
    // API L·∫§Y DANH S√ÅCH PH√íNG THEO T√íA ü§¶‚Äç‚ôÇÔ∏è
    fun fetchRoomsForBuilding(building_id: String) {
        viewModelScope.launch {
            try {
                // Gi·∫£ s·ª≠ b·∫°n c√≥ h√†m API n√†y ƒë·ªÉ l·∫•y ph√≤ng cho t√≤a nh√†
                val rooms = apiService.getRoomsForBuilding(building_id) // Th·ª±c hi·ªán g·ªçi API
                _rooms.postValue(rooms)
            } catch (e: Exception) {
                _rooms.postValue(emptyList()) // X·ª≠ l√Ω l·ªói n·∫øu c·∫ßn
                e.printStackTrace()
            }
        }
    }
    // hi·ªÉn th·ªã chi ti·∫øt ph√≤ng theo id ph√≤ng c·ªßa mongodb t·ª± ƒë·ªông sinh ra üè†
    fun fetchRoomDetailById(id: String) {
        // Ki·ªÉm tra xem d·ªØ li·ªáu ph√≤ng ƒë√£ c√≥ ch∆∞a
        if (_roomDetail.value != null) return // N·∫øu ƒë√£ c√≥ d·ªØ li·ªáu th√¨ kh√¥ng g·ªçi API n·ªØa

        viewModelScope.launch {
            try {
                val response = apiService.getRoomDetailById(id)
                if (response.isSuccessful) {
                    _roomDetail.value = response.body()  // L∆∞u d·ªØ li·ªáu v√†o LiveData
                } else {
                    Log.e("API_ERROR", "Failed to fetch room details: ${response.message()}")
                    _error.value = "Failed to fetch room details: ${response.message()}"
                }
            } catch (e: Exception) {
                Log.e("API_EXCEPTION", "Exception: ${e.message}", e)
                _error.value = "Exception: ${e.message}"
            }
        }
    }
    fun deleteRoomById(id: String) {
        viewModelScope.launch {
            try {
                // G·ªçi API ƒë·ªÉ x√≥a ph√≤ng
                val response = apiService.deleteRoom(id)

                if (response.isSuccessful) {
                    // X·ª≠ l√Ω th√†nh c√¥ng
                    _error.value = null // Reset l·ªói (n·∫øu c√≥)
                    Log.d("RoomViewModel", "Room deleted successfully.")
                } else {
                    // X·ª≠ l√Ω th·∫•t b·∫°i
                    _error.value = "Failed to delete room: ${response.message()}"
                    Log.e("RoomViewModel", "Failed to delete room: ${response.message()}")
                }
            } catch (e: Exception) {
                // X·ª≠ l√Ω l·ªói khi g·ªçi API
                _error.value = "Exception: ${e.message}"
                Log.e("RoomViewModel", "Exception: ${e.message}", e)
            }
        }
    }
    //    API ADD PH√íNG
    fun addRoom(
        buildingId: String,
        roomName: String,
        roomType: String,
        description: String,
        price: Double,
        size: String,
        service: Any,
        amenities: Any,
        limit_person: Int,
        status: String,
        photoUris: List<Uri>,
        videoUris: List<Uri>
    ) {
        viewModelScope.launch(Dispatchers.IO) {
            try {
                _isLoading.postValue(true)


                // Ki·ªÉm tra s·ªë l∆∞·ª£ng ·∫£nh v√† video tr∆∞·ªõc khi g·ª≠i
                if (photoUris.size > 10 || videoUris.size > 2) {
                    _error.postValue("Ch·ªâ ƒë∆∞·ª£c ph√©p t·∫£i l√™n t·ªëi ƒëa 10 ·∫£nh v√† 2 video.")
                    _isLoading.postValue(false)
                    return@launch
                }

                val parsedService = when (service) {
                    is List<*> -> Gson().toJson(service) // N·∫øu l√† danh s√°ch, chuy·ªÉn sang JSON
                    is String -> service // N·∫øu l√† chu·ªói JSON, gi·ªØ nguy√™n
                    else -> "[]" // M·∫∑c ƒë·ªãnh r·ªóng
                }

                val parsedAmenities = when (amenities) {
                    is List<*> -> Gson().toJson(amenities) // N·∫øu l√† danh s√°ch, chuy·ªÉn sang JSON
                    is String -> amenities // N·∫øu l√† chu·ªói JSON, gi·ªØ nguy√™n
                    else -> "[]" // M·∫∑c ƒë·ªãnh r·ªóng
                }

                // T·∫°o request body cho c√°c tr∆∞·ªùng vƒÉn b·∫£n
                val buildingIdBody = createPartFromString(buildingId)
                val roomNameBody = createPartFromString(roomName)
                val roomTypeBody = createPartFromString(roomType)
                val descriptionBody = createPartFromString(description)
                val priceBody = createPartFromString(price.toString())
                val sizeBody = createPartFromString(size)
                val limitPersonBody = createPartFromString(limit_person.toString())
                val statusBody = createPartFromString(status.toString())
                val serviceBody = createPartFromString(parsedService)
                val amenitiesBody = createPartFromString(parsedAmenities)
                // X·ª≠ l√Ω c√°c URI h√¨nh ·∫£nh v√† video th√†nh MultipartBody.Part
                val photoParts = photoUris.mapIndexed { index, uri ->
                    processUri(context, Uri.parse(uri.toString()), "photos_room", "photo_$index.jpg")
                }




                val videoParts = videoUris.mapIndexed { index, uriString ->
                    val uri = Uri.parse(uriString.toString()) // Chuy·ªÉn ƒë·ªïi String th√†nh Uri
                    processUri(context, uri, "video_room", "video_$index.mp4")
                }


                // G·ª≠i y√™u c·∫ßu API
                val response = apiService.addRoom(
                    buildingId = buildingIdBody,
                    roomName = roomNameBody,
                    room_type = roomTypeBody,
                    description = descriptionBody,
                    price = priceBody,
                    size = sizeBody,
                    service = serviceBody,
                    amenities = amenitiesBody,
                    limit_person = limitPersonBody,
                    status = statusBody,
                    photos_room = photoParts,
                    video_room = videoParts
                )


                withContext(Dispatchers.Main) {
                    if (response.isSuccessful) {
                        _addRoomResponse.value = response
                    } else {
                        _error.value = "L·ªói: ${response.message()}"
                    }
                    _isLoading.value = false
                }
            } catch (e: Exception) {
                withContext(Dispatchers.Main) {
                    Log.d("ErrorUpload", "addRoom: ${e.message}")
                    _error.value = "L·ªói: ${e.message}"
                    _isLoading.value = false
                }
            }
        }
    }




    private fun createPartFromString(value: String): RequestBody {
        return RequestBody.create("text/plain".toMediaTypeOrNull(), value)
    }
    fun processUri(context: Context, uri: Uri, paramName: String, fileName: String): MultipartBody.Part {
        return try {
            val inputStream = context.contentResolver.openInputStream(uri)
                ?: throw IOException("Kh√¥ng th·ªÉ m·ªü InputStream t·ª´ URI: $uri")


            val byteArray = inputStream.readBytes()


            val requestBody = byteArray.toRequestBody("application/octet-stream".toMediaTypeOrNull())
            MultipartBody.Part.createFormData(paramName, fileName, requestBody)
        } catch (e: Exception) {
            Log.e("ProcessUriError", "Error processing URI $uri: ${e.message}", e)
            throw e
        }
    }


    fun getRealPathFromURI(context: Context, uri: Uri): String? {
        // Ki·ªÉm tra xem URI l√† ki·ªÉu content hay file
        return if (uri.scheme == "content") {
            val cursor = context.contentResolver.query(uri, null, null, null, null)
            cursor?.use {
                val columnIndex = it.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
                if (it.moveToFirst()) it.getString(columnIndex) else null
            }
        } else if (uri.scheme == "file") {
            uri.path
        } else {
            null
        }
    }




    class RoomViewModeFactory(private val context: Context) :
        ViewModelProvider.Factory {
        override fun <T : ViewModel> create(modelClass: Class<T>): T {
            if (modelClass.isAssignableFrom(RoomViewModel::class.java)) {
                @Suppress("UNCHECKED_CAST")
                return RoomViewModel(context) as T
            }
            throw IllegalArgumentException("Unknown ViewModel class")
        }
    }

    // UPDATE PH√íNG :
    fun updateRoom(
        id: String,
        roomName: String,
        roomType: String,
        description: String,
        price: String,
        size: String,
        service: Any,
        amenities: Any,
        limit_person: String,
        status: String,
        photoUris: List<Uri>,
        videoUris: List<Uri>
    ) {
        viewModelScope.launch(Dispatchers.IO) {
            try {
                _isLoading.postValue(true)

                // Ki·ªÉm tra s·ªë l∆∞·ª£ng ·∫£nh v√† video tr∆∞·ªõc khi g·ª≠i
                if (photoUris.size > 10 || videoUris.size > 2) {
                    _error.postValue("Ch·ªâ ƒë∆∞·ª£c ph√©p t·∫£i l√™n t·ªëi ƒëa 10 ·∫£nh v√† 2 video.")
                    _isLoading.postValue(false)
                    return@launch
                }

                val parsedService = when (service) {
                    is List<*> -> Gson().toJson(service) // N·∫øu l√† danh s√°ch, chuy·ªÉn sang JSON
                    is String -> service // N·∫øu l√† chu·ªói JSON, gi·ªØ nguy√™n
                    else -> "[]" // M·∫∑c ƒë·ªãnh r·ªóng
                }

                val parsedAmenities = when (amenities) {
                    is List<*> -> Gson().toJson(amenities) // N·∫øu l√† danh s√°ch, chuy·ªÉn sang JSON
                    is String -> amenities // N·∫øu l√† chu·ªói JSON, gi·ªØ nguy√™n
                    else -> "[]" // M·∫∑c ƒë·ªãnh r·ªóng
                }

                // T·∫°o map ch·ª©a c√°c tr∆∞·ªùng vƒÉn b·∫£n
                val data = mapOf(
                    "room_name" to createPartFromString(roomName),
                    "room_type" to createPartFromString(roomType),
                    "description" to createPartFromString(description),
                    "price" to createPartFromString(price.toString()),
                    "size" to createPartFromString(size),
                    "limit_person" to createPartFromString(limit_person.toString()),
                    "status" to createPartFromString(status.toString()),
                    "service" to createPartFromString(parsedService),
                    "amenities" to createPartFromString(parsedAmenities)
                )

                // X·ª≠ l√Ω c√°c URI h√¨nh ·∫£nh v√† video th√†nh MultipartBody.Part
                val photoParts = photoUris.mapIndexed { index, uri ->
                    processUri(context, uri, "photos_room", "photo_$index.jpg")
                }

                val videoParts = videoUris.mapIndexed { index, uri ->
                    processUri(context, uri, "video_room", "video_$index.mp4")
                }

                // G·ª≠i y√™u c·∫ßu API
                val response = apiService.updateRoom(
                    id = id,
                    data = data,
                    photos = if (photoParts.isNotEmpty()) photoParts else null,
                    videos = if (videoParts.isNotEmpty()) videoParts else null
                )

                withContext(Dispatchers.Main) {
                    if (response.isSuccessful) {
                        _updateRoomResponse.value = response.body()
                        _successMessage.postValue("C·∫≠p nh·∫≠t ph√≤ng th√†nh c√¥ng.")
                    } else {
                        _error.postValue("L·ªói c·∫≠p nh·∫≠t: ${response.message()}")
                    }
                    _isLoading.postValue(false)
                }
            } catch (e: Exception) {
                withContext(Dispatchers.Main) {
                    Log.e("UpdateRoomError", "Error: ${e.message}")
                    _error.postValue("L·ªói: ${e.message}")
                    _isLoading.postValue(false)
                }
            }
        }
    }
}
