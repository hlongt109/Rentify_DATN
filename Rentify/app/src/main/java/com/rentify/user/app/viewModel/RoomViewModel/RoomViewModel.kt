package com.rentify.user.app.viewModel.RoomViewModel

import android.net.Uri
import android.util.Log
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.rentify.user.app.model.AddRoomResponse
import com.rentify.user.app.model.BuildingWithRooms
import com.rentify.user.app.model.Room
import com.rentify.user.app.network.RetrofitService
import kotlinx.coroutines.launch
import okhttp3.MediaType.Companion.toMediaTypeOrNull
import okhttp3.MultipartBody
import okhttp3.RequestBody
import okhttp3.RequestBody.Companion.asRequestBody
import retrofit2.Response
import java.io.File

class RoomViewModel : ViewModel() {
    private val _roomNames = MutableLiveData<List<String>>()
    val roomNames: LiveData<List<String>> get() = _roomNames
    private val apiService = RetrofitService().ApiService
    private val _addRoomResponse = MutableLiveData<Response<AddRoomResponse>>()
    val addRoomResponse: LiveData<Response<AddRoomResponse>> get() = _addRoomResponse
    private val _rooms = MutableLiveData<List<Room>>()
    val rooms: LiveData<List<Room>> get() = _rooms
    private val _buildingWithRooms = MutableLiveData<List<BuildingWithRooms>>()
    val buildingWithRooms: LiveData<List<BuildingWithRooms>> get() = _buildingWithRooms
    private val _roomDetail = MutableLiveData<Room?>()
    val roomDetail: LiveData<Room?> get() = _roomDetail
    private val _error = MutableLiveData<String?>()
    val error: LiveData<String?> get() = _error
    //    API ADD PH√íNG
    fun addRoom(
        buildingId: String,
        roomName: String,
        roomType: String,
        description: String,
        price: Double,
        size: String,
        status: Int,
        videoFile: List<Uri>?,
        photoFiles: List<Uri>?,
        service: List<String>?,
        amenities: List<String>?,
        limitPerson: Int
    ) {
        viewModelScope.launch {
            try {
                // Convert video URIs to URLs (Assuming you upload them somewhere and get the URLs)
                val videoUrls = videoFile?.map { uri ->
                    uploadFileToServer(uri, "video/mp4")
                }
                val photoUrls = photoFiles?.map { uri ->
                    uploadFileToServer(uri, "image/jpeg")
                }
                val response = apiService.addRoom(
                    building_id = createPartFromString(buildingId),
                    room_name = createPartFromString(roomName),
                    room_type = createPartFromString(roomType),
                    description = createPartFromString(description),
                    price = createPartFromString(price.toString()),
                    size = createPartFromString(size),
                    status = createPartFromString(status.toString()),
                    video_room = videoUrls,
                    photos_room = photoUrls,
                    service = service?.let { createPartFromString(it.joinToString(",")) },
                    amenities = amenities?.let { createPartFromString(it.joinToString(",")) },
                    limit_person = createPartFromString(limitPerson.toString())
                )

                if (response.isSuccessful) {
                    _addRoomResponse.value = response
                } else {
                    _error.value = "L·ªói khi th√™m ph√≤ng: ${response.message()}"
                }
            } catch (e: Exception) {
                _error.value = "L·ªói khi th√™m ph√≤ng: ${e.message}"
            }
        }
    }
    private suspend fun uploadFileToServer(uri: Uri, mimeType: String): String {
        try {
            val file = File(uri.path!!)
            val requestBody = file.asRequestBody(mimeType.toMediaTypeOrNull())
            val multipart = MultipartBody.Part.createFormData("file", file.name, requestBody)
            val response = apiService.uploadFile(multipart)
            return response.body()?.fileUrl ?: ""
        } catch (e: Exception) {
            Log.e("UploadError", "File upload failed: ${e.message}", e)
            return ""
        }
    }
    private fun createPartFromString(value: String): RequestBody {
        return RequestBody.create("text/plain".toMediaTypeOrNull(), value)
    }

    // API L·∫§Y DANH S√ÅCH T√íA THEO MANAGERID
    fun fetchBuildingsWithRooms(manager_id: String) {
        viewModelScope.launch {
            try {
                val response: Response<List<BuildingWithRooms>> =
                    apiService.getBuildingsWithRooms(manager_id)

                if (response.isSuccessful) {
                    _buildingWithRooms.value = response.body()
                } else {
                    Log.e("API_ERROR", "Error fetching data: ${response.message()}")
                    _error.value = "Failed to fetch buildings: ${response.message()}"
                }
            } catch (e: Exception) {
                Log.e("API_EXCEPTION", "Exception: ${e.message}", e)
                _error.value = "An error occurred: ${e.message}"
            }
        }
    }
    // API L·∫§Y DANH S√ÅCH PH√íNG THEO T√íA ü§¶‚Äç‚ôÇÔ∏è
    fun fetchRoomsForBuilding(building_id: String) {
        viewModelScope.launch {
            try {
                // Gi·∫£ s·ª≠ b·∫°n c√≥ h√†m API n√†y ƒë·ªÉ l·∫•y ph√≤ng cho t√≤a nh√†
                val rooms = apiService.getRoomsForBuilding(building_id) // Th·ª±c hi·ªán g·ªçi API
                _rooms.postValue(rooms)
            } catch (e: Exception) {
                _rooms.postValue(emptyList()) // X·ª≠ l√Ω l·ªói n·∫øu c·∫ßn
                e.printStackTrace()
            }
        }
    }
    // hi·ªÉn th·ªã chi ti·∫øt ph√≤ng theo id ph√≤ng c·ªßa mongodb t·ª± ƒë·ªông sinh ra üè†
    fun fetchRoomDetailById(id: String) {
        // Ki·ªÉm tra xem d·ªØ li·ªáu ph√≤ng ƒë√£ c√≥ ch∆∞a
        if (_roomDetail.value != null) return // N·∫øu ƒë√£ c√≥ d·ªØ li·ªáu th√¨ kh√¥ng g·ªçi API n·ªØa

        viewModelScope.launch {
            try {
                val response = apiService.getRoomDetailById(id)
                if (response.isSuccessful) {
                    _roomDetail.value = response.body()  // L∆∞u d·ªØ li·ªáu v√†o LiveData
                } else {
                    Log.e("API_ERROR", "Failed to fetch room details: ${response.message()}")
                    _error.value = "Failed to fetch room details: ${response.message()}"
                }
            } catch (e: Exception) {
                Log.e("API_EXCEPTION", "Exception: ${e.message}", e)
                _error.value = "Exception: ${e.message}"
            }
        }
    }
    fun deleteRoomById(id: String) {
        viewModelScope.launch {
            try {
                // G·ªçi API ƒë·ªÉ x√≥a ph√≤ng
                val response = apiService.deleteRoom(id)

                if (response.isSuccessful) {
                    // X·ª≠ l√Ω th√†nh c√¥ng
                    _error.value = null // Reset l·ªói (n·∫øu c√≥)
                    Log.d("RoomViewModel", "Room deleted successfully.")
                } else {
                    // X·ª≠ l√Ω th·∫•t b·∫°i
                    _error.value = "Failed to delete room: ${response.message()}"
                    Log.e("RoomViewModel", "Failed to delete room: ${response.message()}")
                }
            } catch (e: Exception) {
                // X·ª≠ l√Ω l·ªói khi g·ªçi API
                _error.value = "Exception: ${e.message}"
                Log.e("RoomViewModel", "Exception: ${e.message}", e)
            }
        }
    }

}
